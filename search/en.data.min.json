[{"id":0,"href":"/metricslint/","title":"/metrics lint","parent":"O11y toolkit","content":"This tool enables you to validate the format of Prometheus metrics, and make sure they can be scraped by a Prometheus server.\nPrometheus supports two exposition formats: the Prometheus text-based exposition format and OpenMetrics. The text-based exposition format is widespread, and many applications and client libraries supports it. Additionally, it can be used from scripts, to push metrics to the Pushgateway or written to *.prom files, to be collected by the textfile collectors (available in both the Node Exporter and the Windows Exporter).\nOur toolkit also provides oy-expose, a standalone tool that can expose the metrics of a file to be consumed by Prometheus.\nUsage     To use this tool, simply paste the content of your *.prom file, the body of your Pushgateway request, or the output of a /metrics HTTP endpoint in the following text area. Then, click on the \u0026ldquo;Lint\u0026rdquo; button.\nYou can click on the following button to load a few metrics:\nLoad sample Security and privacy     The input is parsed in your browser and is not sent to our servers. This tool is based on the official client_golang library and is cross compiled to WASM, so that it runs natively in your browser.\nFormat specification     This tool uses the Prometheus text-based exposition format. OpenMetrics is not supported yet.\nEverything is run locally from your browser, we do not receive or collect your metrics.\nCommand line tool     This utilise behaves like the promtool check metrics command, which is downloadable with Prometheus.\nMetrics validation      Loading The application is loading. If this warning does not disappear, please make sure that your browser supports WASM and that javascript is enabled.     if (!WebAssembly.instantiateStreaming) { // polyfill WebAssembly.instantiateStreaming = async (resp, importObject) = { const source = await (await resp).arrayBuffer(); return await WebAssembly.instantiate(source, importObject); }; } const go = new Go(); WebAssembly.instantiateStreaming(fetch(\"/metricslint.wasm\"), go.importObject).then((result) = { go.run(result.instance); });   Lint  "},{"id":1,"href":"/categories/","title":"Categories","parent":"O11y toolkit","content":""},{"id":2,"href":"/httpclient/","title":"HTTP client","parent":"O11y toolkit","content":"Command line tools that connect to a Prometheus server can take a file path in a --client.config parameter. This is useful to connect to a Prometheus server with authentication or self-signed certificates.\nThe file is written in YAML format, defined by the scheme described below. Brackets indicate that a parameter is optional. For non-list parameters the value is set to the specified default.\nGeneric placeholders are defined as follows:\n \u0026lt;bool\u0026gt;: a boolean that can take the values true or false \u0026lt;filename\u0026gt;: a valid path in the current working directory \u0026lt;secret\u0026gt;: a regular string that is a secret, such as a password \u0026lt;string\u0026gt;: a regular string  The other placeholders are specified separately.\n# Sets the `Authorization` header on every request with the # configured username an. # password and password_file are mutually exclusive. basic_auth: [ username: \u0026lt;string\u0026gt; ] [ password: \u0026lt;secret\u0026gt; ] [ password_file: \u0026lt;string\u0026gt; ] # Sets the `Authorization` header on every request with # the configured credentials. authorization: # Sets the authentication type of the request. [ type: \u0026lt;string\u0026gt; | default: Bearer ] # Sets the credentials of the request. It is mutually exclusive with # `credentials_file`. [ credentials: \u0026lt;secret\u0026gt; ] # Sets the credentials of the request with the credentials read from the # configured file. It is mutually exclusive with `credentials`. [ credentials_file: \u0026lt;filename\u0026gt; ] # Optional OAuth 2.0 configuration. # Cannot be used at the same time as basic_auth or authorization. oauth2: [ \u0026lt;oauth2\u0026gt; ] # Configure whether requests follow HTTP 3xx redirects. [ follow_redirects: \u0026lt;boolean\u0026gt; | default = true ] # Whether to enable HTTP2. [ enable_http2: \u0026lt;bool\u0026gt; | default: true ] # Configures the request\u0026#39;s TLS settings. tls_config: [ \u0026lt;tls_config\u0026gt; ] # Optional proxy URL. [ proxy_url: \u0026lt;string\u0026gt; ] \u0026lt;tls_config\u0026gt;     A tls_config allows configuring TLS connections.\n# CA certificate to validate API server certificate with. [ ca_file: \u0026lt;filename\u0026gt; ]  # Certificate and key files for client cert authentication to the server. [ cert_file: \u0026lt;filename\u0026gt; ] [ key_file: \u0026lt;filename\u0026gt; ]  # ServerName extension to indicate the name of the server. # https://tools.ietf.org/html/rfc4366#section-3.1 [ server_name: \u0026lt;string\u0026gt; ]  # Disable validation of the server certificate. [ insecure_skip_verify: \u0026lt;boolean\u0026gt; ]  # Minimum acceptable TLS version. Accepted values: TLS10 (TLS 1.0), TLS11 (TLS # 1.1), TLS12 (TLS 1.2), TLS13 (TLS 1.3). # If unset, Prometheus will use Go default minimum version, which is TLS 1.2. # See MinVersion in https://pkg.go.dev/crypto/tls#Config. [ min_version: \u0026lt;string\u0026gt; ] \u0026lt;oauth2\u0026gt;     OAuth 2.0 authentication using the client credentials grant type. Prometheus fetches an access token from the specified endpoint with the given client access and secret keys.\nclient_id: \u0026lt;string\u0026gt; [ client_secret: \u0026lt;secret\u0026gt; ]  # Read the client secret from a file. # It is mutually exclusive with `client_secret`. [ client_secret_file: \u0026lt;filename\u0026gt; ]  # Scopes for the token request. scopes:  [ - \u0026lt;string\u0026gt; ... ]  # The URL to fetch the token from. token_url: \u0026lt;string\u0026gt;  # Optional parameters to append to the token URL. endpoint_params:  [ \u0026lt;string\u0026gt;: \u0026lt;string\u0026gt; ... ]  # Configures the token request\u0026#39;s TLS settings. tls_config:  [ \u0026lt;tls_config\u0026gt; ]  # Optional proxy URL. [ proxy_url: \u0026lt;string\u0026gt; ]  This page is derived from the Prometheus documentation which is licensed under CC-BY-SA 4.0 Â© Prometheus Authors.\n"},{"id":3,"href":"/","title":"O11y toolkit","parent":"","content":"The O11y toolkit is a set of utilities that help you debug, augment, and manage your open source observability stack.\nThe toolkit is licensed under the Apache 2 license. You can use it for free.\nAvailable tools      oy-expose: command line utility to expose a single metrics file to be scraped by Prometheus. oy-scrape-jitter: command line utility to analyze Prometheus scrape timestamps jitter.  Sponsor     This toolkit is sponsored by O11y. O11y provides professional support and services for your Open Source observability stack.\n"},{"id":4,"href":"/oy-expose/","title":"oy-expose","parent":"O11y toolkit","content":"Usage     usage: oy-expose [\u0026lt;flags\u0026gt;] [\u0026lt;metrics-file\u0026gt;] Flags: -h, --help Show context-sensitive help (also try --help-long and --help-man). --web.config.file=\u0026#34;\u0026#34; [EXPERIMENTAL] Path to configuration file that can enable TLS or authentication. --web.listen-address=\u0026#34;:9099\u0026#34; Address to listen on for web interface and telemetry. --web.telemetry-path=\u0026#34;/metrics\u0026#34; Path under which to expose metrics. --web.disable-exporter-metrics Exclude metrics about the exporter itself (promhttp_*, process_*, go_*). --log.level=info Only log messages with the given severity or above. One of: [debug, info, warn, error] --log.format=logfmt Output format of log messages. One of: [logfmt, json] --version Show application version. Args: [\u0026lt;metrics-file\u0026gt;] File to read metrics from. Description     oy-expose reads a metrics file and exposes its content to be scraped by a Prometheus server.\nThis is similar to the Node Exporter Textfile Collector, with a few differences:\n oy-expose only exposes on file. oy-expose does not embed other collectors.  Example usage     Let\u0026rsquo;s create a file called \u0026ldquo;metrics\u0026rdquo; with the following content:\nmaintenance_script_run_timestamp_seconds 1647524557 maintenance_script_return_code 0 We can run oy-expose:\n$ oy-expose --web.disable-exporter-metrics And query the metrics:\n$ curl localhost:9099/metrics # HELP maintenance_script_return_code Metric read from metrics # TYPE maintenance_script_return_code untyped maintenance_script_return_code 0 # HELP maintenance_script_run_timestamp_seconds Metric read from metrics # TYPE maintenance_script_run_timestamp_seconds untyped maintenance_script_run_timestamp_seconds 1.647524557e+09 # HELP node_textfile_mtime_seconds Unixtime mtime of textfiles successfully read. # TYPE node_textfile_mtime_seconds gauge node_textfile_mtime_seconds{file=\u0026#34;metrics\u0026#34;} 1.647530635e+09 # HELP node_textfile_scrape_error 1 if there was an error opening or reading a file, 0 otherwise # TYPE node_textfile_scrape_error gauge node_textfile_scrape_error 0 Downloading     linux (wget)  To execute oy-expose within Linux, run:\nwget https://github.com/o11ydev/oy-toolkit/releases/download/main/oy-expose -O oy-expose \u0026amp;\u0026amp; chmod +x oy-expose \u0026amp;\u0026amp; ./oy-expose --help   linux (deb)  oy-expose is available as a .deb package: https://github.com/o11ydev/oy-toolkit/releases/download/main/oy-expose.deb  linux (yum)  oy-expose is available as a .rpm package: https://github.com/o11ydev/oy-toolkit/releases/download/main/oy-expose.rpm  docker  To execute oy-expose with docker, run:\ndocker run quay.io/o11y/oy-toolkit:oy-expose --help   nix  To execute oy-expose with nix, run:\nnix run github:o11ydev/oy-toolkit#oy-expose -- --help    "},{"id":5,"href":"/oy-scrape-jitter/","title":"oy-scrape-jitter","parent":"O11y toolkit","content":"Usage     usage: oy-scrape-jitter [\u0026lt;flags\u0026gt;] Flags: -h, --help Show context-sensitive help (also try --help-long and --help-man). --metric=\u0026#34;up\u0026#34; Metric to use to determine jitter. --query.timestamp=QUERY.TIMESTAMP Timestamp of the query. --plot.file=file.png Path to a file to write an image of the results. --plot.log-y Use logarithmic Y axis. --lookback=1h How much time to look in the past for scrapes. --divisor=1s Divisor to use to determine if a scrape is aligned. --log.unaligned-only Only take unaligned targets in logging. --plot.unaligned-only Only take unaligned targets in plot. --log.results-only Only log final result. --prometheus.url=\u0026#34;http://127.0.0.1:9090\u0026#34; URL of the Prometheus server. --client.config=CLIENT.CONFIG Path to a HTTP client configuration. --log.level=info Only log messages with the given severity or above. One of: [debug, info, warn, error] --log.format=logfmt Output format of log messages. One of: [logfmt, json] --version Show application version. Description     oy-scrape-jitter queries a Prometheus server to see how regular scrapes are. Perfect scrape alignment happens when the distance between all the scrapes are exactly the same. It enables Prometheus delta-of-delta encoding to reduce significantly the size of the blocks.\nExample usage     $ ./oy-scrape-jitter --prometheus.url=https://prometheus.demo.do.prometheus.io/ --log.results-only ts=2022-04-26T12:11:34.659Z caller=main.go:117 level=info msg=\u0026#34;overall results\u0026#34; aligned_targets=0 unaligned_targets=10 max_ms=25 This means that the maximum deviation seen in your scrape jobs is 25ms. You could set --scrape.timestamp-tolerance=25ms to reduce your disk usage over time, by enabling Prometheus to correct timestamps up to 25ms.\nPrometheus limits     Prometheus will only apply timestamp tolerance up to 1%. If your scrape interval is 30s, you can only adjust timestamps up to 300ms. Setting a 500ms tolerance will have no effects on jobs with a scrape interval lower than 500s, even if the deviation is tiny.\nPlotting the output     By using --plot.file=scrape.png, you can generate a PNG file which shows the scrape timestamps jitter with an histogram.\nDownloading     linux (wget)  To execute oy-scrape-jitter within Linux, run:\nwget https://github.com/o11ydev/oy-toolkit/releases/download/main/oy-scrape-jitter -O oy-scrape-jitter \u0026amp;\u0026amp; chmod +x oy-scrape-jitter \u0026amp;\u0026amp; ./oy-scrape-jitter --help   linux (deb)  oy-scrape-jitter is available as a .deb package: https://github.com/o11ydev/oy-toolkit/releases/download/main/oy-scrape-jitter.deb  linux (yum)  oy-scrape-jitter is available as a .rpm package: https://github.com/o11ydev/oy-toolkit/releases/download/main/oy-scrape-jitter.rpm  docker  To execute oy-scrape-jitter with docker, run:\ndocker run quay.io/o11y/oy-toolkit:oy-scrape-jitter --help   nix  To execute oy-scrape-jitter with nix, run:\nnix run github:o11ydev/oy-toolkit#oy-scrape-jitter -- --help    "},{"id":6,"href":"/pwgen/","title":"Prometheus password file generator","parent":"O11y toolkit","content":"This form enables you to generate a Prometheus web.yml file to secure your Prometheus endpoints with basic authentication.\nPrometheus needs passwords hashed with bcrypt. This tool hashes the passwords directly in your browser, in such a way that we do not receive the passwords you are generating.\nOnce the file is generated, you can optionally append your TLS server configuration to the file, then start Prometheus with --web.config.file pointing to your newly created file.\nThis file is also compatible with Alertmanager, Pushgateway, Node Exporter and other official exporters.\nHow to     Enter the usernames and the passwords, then press the Generate button to compute the file.\nYou can add and remove users with the Remove and Add user buttons.\nSecurity and privacy     The input is parsed in your browser and is not sent to our servers. This tool is cross compiled to WASM, so that it runs natively in your browser.\nUsers list      Loading The application is loading. If this warning does not disappear, please make sure that your browser supports WASM and that javascript is enabled.     if (!WebAssembly.instantiateStreaming) { // polyfill WebAssembly.instantiateStreaming = async (resp, importObject) = { const source = await (await resp).arrayBuffer(); return await WebAssembly.instantiate(source, importObject); }; } const go = new Go(); WebAssembly.instantiateStreaming(fetch(\"/pwgen.wasm\"), go.importObject).then((result) = { go.run(result.instance); }); addUser = function(){ tb = document.getElementById('usersTable'); newRow = tb.getElementsByTagName('tbody')[0].insertRow(); t1=newRow.insertCell(); t1.innerHTML=''; t1.setAttribute(\"label\",\"Username\"); t1.setAttribute(\"class\",\"flext\"); t2=newRow.insertCell(); t2.innerHTML=''; t2.setAttribute(\"label\",\"Password\"); t2.setAttribute(\"class\",\"flext\"); t3=newRow.insertCell(); t3.innerHTML=''; }; switchViz = function(t){ pw = document.querySelectorAll('[name=\"password\"]'); for (i = 0; i   Username Password       New user Show passwords Generate  "},{"id":7,"href":"/promqlparser/","title":"PromQL Parser","parent":"O11y toolkit","content":" Load sample  Loading The application is loading. If this warning does not disappear, please make sure that your browser supports WASM and that javascript is enabled.     if (!WebAssembly.instantiateStreaming) { // polyfill WebAssembly.instantiateStreaming = async (resp, importObject) = { const source = await (await resp).arrayBuffer(); return await WebAssembly.instantiate(source, importObject); }; } const go = new Go(); WebAssembly.instantiateStreaming(fetch(\"/promqlparser.wasm\"), go.importObject).then((result) = { go.run(result.instance); });   Parse  "},{"id":8,"href":"/tags/","title":"Tags","parent":"O11y toolkit","content":""}]