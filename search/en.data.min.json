[{"id":0,"href":"/metriclint/","title":"/metrics lint","parent":"O11y toolkit","content":"Paste the output of /metrics or a .prom file generated by a script, then click on the \u0026ldquo;Lint\u0026rdquo; button to validate your Prometheus metrics input.\nEverything is run locally from your browser, we do not receive or collect your metrics.\n  if (!WebAssembly.instantiateStreaming) { // polyfill WebAssembly.instantiateStreaming = async (resp, importObject) = { const source = await (await resp).arrayBuffer(); return await WebAssembly.instantiate(source, importObject); }; } const go = new Go(); WebAssembly.instantiateStreaming(fetch(\"/metriclint.wasm\"), go.importObject).then((result) = { go.run(result.instance); });   Lint  "},{"id":1,"href":"/categories/","title":"Categories","parent":"O11y toolkit","content":""},{"id":2,"href":"/","title":"O11y toolkit","parent":"","content":"The O11y toolkit is a set of utilities that help you debugging, augmenting, and manage your observability stacks.\nThis toolkit is WIP.\nThis toolkit is currently in early development. The tools here do not have stable API\u0026rsquo;s and might not work as expected.  "},{"id":3,"href":"/oy-expose/","title":"oy-expose","parent":"O11y toolkit","content":"This toolkit is WIP.\nThis toolkit is currently in early development. The tools here do not have stable API\u0026rsquo;s and might not work as expected.  Usage     usage: oy-expose [\u0026lt;flags\u0026gt;] [\u0026lt;metrics-file\u0026gt;] Flags: -h, --help Show context-sensitive help (also try --help-long and --help-man). --web.config.file=\u0026#34;\u0026#34; [EXPERIMENTAL] Path to configuration file that can enable TLS or authentication. --web.listen-address=\u0026#34;:9099\u0026#34; Address to listen on for web interface and telemetry. --web.telemetry-path=\u0026#34;/metrics\u0026#34; Path under which to expose metrics. --web.disable-exporter-metrics Exclude metrics about the exporter itself (promhttp_*, process_*, go_*). --log.level=info Only log messages with the given severity or above. One of: [debug, info, warn, error] --log.format=logfmt Output format of log messages. One of: [logfmt, json] --version Show application version. Args: [\u0026lt;metrics-file\u0026gt;] File to read metrics from. Description     oy-expose reads a metrics file and exposes its content to be scraped by a Prometheus server.\nThis is similar to the Node Exporter Textfile Collector, with a few differences:\n oy-expose only exposes on file. oy-expose does not embed other collectors.  Example usage     Let\u0026rsquo;s create a file called \u0026ldquo;metrics\u0026rdquo; with the following content:\nmaintenance_script_run_timestamp_seconds 1647524557 maintenance_script_return_code 0 We can run oy-expose:\n$ oy-expose --web.disable-exporter-metrics And query the metrics:\n$ curl localhost:9099/metrics # HELP maintenance_script_return_code Metric read from metrics # TYPE maintenance_script_return_code untyped maintenance_script_return_code 0 # HELP maintenance_script_run_timestamp_seconds Metric read from metrics # TYPE maintenance_script_run_timestamp_seconds untyped maintenance_script_run_timestamp_seconds 1.647524557e+09 # HELP node_textfile_mtime_seconds Unixtime mtime of textfiles successfully read. # TYPE node_textfile_mtime_seconds gauge node_textfile_mtime_seconds{file=\u0026#34;metrics\u0026#34;} 1.647530635e+09 # HELP node_textfile_scrape_error 1 if there was an error opening or reading a file, 0 otherwise # TYPE node_textfile_scrape_error gauge node_textfile_scrape_error 0 Downloading     linux (wget)  To execute oy-expose within Linux, run:\nwget https://github.com/o11ydev/oy-toolkit/releases/download/main/oy-expose -O oy-expose \u0026amp;\u0026amp; chmod +x oy-expose \u0026amp;\u0026amp; ./oy-expose --help   linux (deb)  oy-expose is available as a .deb package: https://github.com/o11ydev/oy-toolkit/releases/download/main/oy-expose.deb  linux (yum)  oy-expose is available as a .rpm package: https://github.com/o11ydev/oy-toolkit/releases/download/main/oy-expose.rpm  docker  To execute oy-expose with docker, run:\ndocker run quay.io/o11y/oy-toolkit:oy-expose --help   nix  To execute oy-expose with nix, run:\nnix run github:o11ydev/oy-toolkit#oy-expose -- --help    "},{"id":4,"href":"/oy-scrape-alignment/","title":"oy-scrape-alignment","parent":"O11y toolkit","content":"This toolkit is WIP.\nThis toolkit is currently in early development. The tools here do not have stable API\u0026rsquo;s and might not work as expected.  Usage     usage: oy-scrape-alignment [\u0026lt;flags\u0026gt;] Flags: -h, --help Show context-sensitive help (also try --help-long and --help-man). --metric=\u0026#34;up\u0026#34; Metric to use to determine alignment. --plot.file=file.png Path to a file to write an image of the results. --plot.log-y Use logarithmic Y axis. --lookback=1h How much time to look in the past for scrapes. --divisor=1s Divisor to use to determine if a scrape is aligned. --log.unaligned-only Only take unaligned targets in logging. --plot.unaligned-only Only take unaligned targets in plot. --log.results-only Only log final result. --prometheus.url=\u0026#34;http://127.0.0.1:9090\u0026#34; URL of the Prometheus server. --log.level=info Only log messages with the given severity or above. One of: [debug, info, warn, error] --log.format=logfmt Output format of log messages. One of: [logfmt, json] --version Show application version. Description     oy-scrape-alignment queries a Prometheus server to see how aligned scrapes are. Perfect scrape alignment happens when the distance between all the scrapes are exactly the same. It enables Prometheus delta-of-delta encoding to reduce significantly the size of the blocks.\nExample usage     $ ./oy-scrape-alignment --prometheus.url=https://prometheus.demo.do.prometheus.io/ --log.results-only ts=2022-04-26T12:11:34.659Z caller=main.go:117 level=info msg=\u0026#34;overall results\u0026#34; aligned_targets=0 unaligned_targets=10 max_ms=25 This means that the maximum deviation seen in your scrape jobs is 25ms. You could set --scrape.timestamp-tolerance=25ms to reduce your disk usage over time, by enabling Prometheus to correct timestamps up to 25ms.\nPrometheus limits     Prometheus will only apply timestamp tolerance up to 1%. If your scrape interval is 30s, you can only adjust timestamps up to 300ms. Setting a 500ms tolerance will have no effects on jobs with a scrape interval lower than 500s, even if the deviation is tiny.\nPlotting the output     By using --plot.file=scrape.png, you can generate a PNG file which shows the scrape (mis-)alignment with an histogram.\nDownloading     linux (wget)  To execute oy-scrape-alignment within Linux, run:\nwget https://github.com/o11ydev/oy-toolkit/releases/download/main/oy-scrape-alignment -O oy-scrape-alignment \u0026amp;\u0026amp; chmod +x oy-scrape-alignment \u0026amp;\u0026amp; ./oy-scrape-alignment --help   linux (deb)  oy-scrape-alignment is available as a .deb package: https://github.com/o11ydev/oy-toolkit/releases/download/main/oy-scrape-alignment.deb  linux (yum)  oy-scrape-alignment is available as a .rpm package: https://github.com/o11ydev/oy-toolkit/releases/download/main/oy-scrape-alignment.rpm  docker  To execute oy-scrape-alignment with docker, run:\ndocker run quay.io/o11y/oy-toolkit:oy-scrape-alignment --help   nix  To execute oy-scrape-alignment with nix, run:\nnix run github:o11ydev/oy-toolkit#oy-scrape-alignment -- --help    "},{"id":5,"href":"/tags/","title":"Tags","parent":"O11y toolkit","content":""}]